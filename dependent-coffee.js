// Generated by CoffeeScript 1.3.3
(function() {
  var colors, dependencies, fs, getNameAndVersion, home, isDirectory, nodeModules, readPackage, userArgs, userInput, writeDependencies;

  fs = require('fs');

  colors = require('colors');

  console.log(process.env.PWD);

  home = process.env.PWD + '/node_modules/';

  userArgs = process.argv.slice(2);

  userInput = userArgs[0];

  if (userInput === 'help') {
    console.log('help');
  }

  if (!!userInput) {
    console.log(userInput);
  }

  nodeModules = [];

  isDirectory = function(item, callback) {
    return fs.stat(home + item, function(err, stats) {
      if (err) {
        throw err;
      }
      if (stats.isDirectory()) {
        nodeModules.push(home + item);
      }
      return callback();
    });
  };

  dependencies = {};

  readPackage = function(item, callback) {
    var data, name, version;
    data = require(item + '/package.json');
    name = data.name;
    version = data.version;
    dependencies[name] = version;
    return callback();
  };

  writeDependencies = function(object) {
    return fs.writeFile(process.env.PWD + '/dependencies.json', JSON.stringify(object, null, 2) + ',', 'utf-8', function(err, data) {
      if (err) {
        throw err;
      }
      return console.log("written file");
    });
  };

  getNameAndVersion = function(modules) {
    var counter;
    counter = 0;
    return modules.forEach(function(module) {
      return readPackage(module, function() {
        counter++;
        if (counter === modules.length) {
          return writeDependencies(dependencies);
        }
      });
    });
  };

  fs.readdir(home, function(err, data) {
    var counter;
    if (err) {
      throw err;
    }
    counter = 0;
    return data.forEach(function(folder) {
      return isDirectory(folder, function() {
        counter++;
        if (counter === data.length) {
          return getNameAndVersion(nodeModules);
        }
      });
    });
  });

}).call(this);
